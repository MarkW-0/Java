/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ca.markw.factorialfactorsandfibonacciwaterman;

/**
 *
 * @author Mark
 */
@SuppressWarnings("serial")
public final class FactorialFactorsAndFibonacciWaterman extends javax.swing.JFrame {
	private String Func;
	private int Input;
	private int Output;
	public void Update(){
		Func = (String) GUI_Combo.getSelectedItem();
		Input = (int) GUI_Input.getValue();
		Output = 1;
		switch(Func){
			case "Factorial" -> Factorial();
			case "Factor" -> Factor();
			case "Fibonacci" -> Fibonacci();
		}
		GUI_Output.setText("" + Output);
	}
	public void Factorial(){
		GUI_Description.setText(
			"The Factorial of n, denoted by n!,\n" + 
			"is the product of all positive integers\n" + 
			"less than or equal to n.\n" + 
			"5! = 1×2×3×4×5 = 120");
		for (int i = 1; i <= Input; i++) {
			Output *= i;
		}
	};
	public void Factor(){
		GUI_Description.setText(
			"This is the largest factor\n" + 
			"less than or equal to\n" + 
			"the square root of n.\n" + 
			"If and only if this is 1 then n is prime"
		);
		for (int i = (int) Math.sqrt(Input); 0 < i; i--) {
			if(Input % i == 0){
				Output = i;
				break;
			}
		}
	};
	public void Fibonacci(){
		GUI_Description.setText(
			"Each number is the sum of\n" + 
			"the two preceding ones.\n" + 
			"F(0) = 0, F(1) = 1,\n" + 
			"F(n) = F(n-1) + F(n-2)"
		);
		int a = 0;
		int b ;
		for (int i = 1; i < Input; i++) {
			b = a;
			a = Output;
			Output = a + b;
		}
	};
	/**
	 * Creates new form FactorialFactorsAndFibonacciWaterman
	 */
	public FactorialFactorsAndFibonacciWaterman() {
		initComponents();
		Update();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        GUI_Title = new javax.swing.JLabel();
        GUI_Combo = new javax.swing.JComboBox<>();
        GUI_Description = new javax.swing.JTextArea();
        GUI_Input = new javax.swing.JSpinner();
        GUI_Output = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        GUI_Title.setText("Factorial Factors and Fibonacci");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(GUI_Title, gridBagConstraints);

        GUI_Combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Factorial", "Factor", "Fibonacci" }));
        GUI_Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GUI_ComboChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(GUI_Combo, gridBagConstraints);

        GUI_Description.setEditable(false);
        GUI_Description.setColumns(20);
        GUI_Description.setRows(4);
        GUI_Description.setText("Output");
        GUI_Description.setBorder(null);
        GUI_Description.setDisabledTextColor(javax.swing.UIManager.getDefaults().getColor("Label.foreground"));
        GUI_Description.setEnabled(false);
        GUI_Description.setFocusable(false);
        GUI_Description.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        getContentPane().add(GUI_Description, gridBagConstraints);

        GUI_Input.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        GUI_Input.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GUI_InputChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(GUI_Input, gridBagConstraints);

        GUI_Output.setEditable(false);
        GUI_Output.setText("Output");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(GUI_Output, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void GUI_InputChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GUI_InputChanged
		Update();
    }//GEN-LAST:event_GUI_InputChanged
    private void GUI_ComboChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUI_ComboChanged
		Update();
    }//GEN-LAST:event_GUI_ComboChanged

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(FactorialFactorsAndFibonacciWaterman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(FactorialFactorsAndFibonacciWaterman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(FactorialFactorsAndFibonacciWaterman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(FactorialFactorsAndFibonacciWaterman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new FactorialFactorsAndFibonacciWaterman().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> GUI_Combo;
    private javax.swing.JTextArea GUI_Description;
    private javax.swing.JSpinner GUI_Input;
    private javax.swing.JTextField GUI_Output;
    private javax.swing.JLabel GUI_Title;
    // End of variables declaration//GEN-END:variables
}
