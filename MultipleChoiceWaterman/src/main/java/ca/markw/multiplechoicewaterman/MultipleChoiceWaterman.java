package ca.markw.multiplechoicewaterman;

import java.awt.Color;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Mark
 */
public class MultipleChoiceWaterman extends javax.swing.JFrame {

	private final javax.swing.JButton[] GUIBUTTONS;
	private final java.util.Random CORRECTRNG = new java.util.Random(42);
	private final java.util.Random PERMUTATIONRNG = new java.util.Random();
	private final String[] QUESTIONS = {
		"What type of group does Vizzini say he, Fezzik and Inigo are?",
		"What word does Vizzini say repeatedly?",
		"Where does Iocane Powder come from?",
		"What is the sand called that Buttercup falls into?",
		"What does the Ancient Booer NOT call Buttercup?",
		"What does the Count say after Inigo has said 'You killed my father' a number of times?",
		"What does Westley tell Humperdink he may keep when he puts him through 'the pain'?"};
	private final String[][] OPTIONS = {
		{"Lonely sheep farmers", "Lost soldiers", "Lost circus performers", "Travelling salesman"},
		{"Inconceivable!", "Impossible!", "Unthinkable!", "Unbelievable!"},
		{"Florin", "Gilder", "Australia", "New Zealand"},
		{"Lightning Sand", "Snow Sand", "Water Sand", "Quick sand"},
		{"Queen of muck", "Queen of trash", "Queen of slime", "Queen of filth"},
		{"Persistent little cuss!", "Okay I get it!", "Enough already!", "Stop saying that!"},
		{"His hands", "His ears", "His feet", "His eyes"}};
	private final int[][] PERMUTATIONS = {
		{1, 2, 3, 0}, {2, 1, 3, 0}, {1, 3, 2, 0}, {2, 3, 1, 0}, {3, 1, 2, 0}, {3, 2, 1, 0},
		{1, 2, 0, 3}, {2, 1, 0, 3}, {1, 3, 0, 2}, {2, 3, 0, 1}, {3, 1, 0, 2}, {3, 2, 0, 1},
		{1, 0, 2, 3}, {2, 0, 1, 3}, {1, 0, 3, 2}, {2, 0, 3, 1}, {3, 0, 1, 2}, {3, 0, 2, 1},
		{0, 1, 2, 3}, {0, 2, 1, 3}, {0, 1, 3, 2}, {0, 2, 3, 1}, {0, 3, 1, 2}, {0, 3, 2, 1}
	};
	private int state = 0;
	private int question = 0;
	private int[] permutation = {0, 1, 2, 3};
	private int correct = 0;
	private int correctButton = 0;
	private int incorrect = 0;
	private void GUI_button_action(int button) {
		switch (state) {
			case 1://question
				correctButton = CORRECTRNG.nextInt(GUIBUTTONS.length);
				if (correctButton == permutation[button]) {
					correct++;
					GUI_correct.setText("" + correct);
					GUI_question.setText("Correct!");
					GUIBUTTONS[button].setBackground(Color.GREEN);
				} else {
					incorrect++;
					GUI_incorrect.setText("" + incorrect);
					GUI_question.setText("Incorrect!");
					GUIBUTTONS[button].setBackground(Color.RED);
					for (int i = 0; i < GUIBUTTONS.length; i++) {
						if (correctButton == permutation[i]) {
							GUIBUTTONS[i].setBackground(Color.GREEN);
						}
					}
				}
				GUI_remaing.setText("" + (QUESTIONS.length - (correct + incorrect)));
				state = 2;
				break;
			case 0://start fall through
			case 2://result
				if (question < QUESTIONS.length) {
					GUI_question.setText(QUESTIONS[question]);
					permutation = PERMUTATIONS[PERMUTATIONRNG.nextInt(24)];
					GUI_question.setText(QUESTIONS[question]);
					for (int i = 0; i < GUIBUTTONS.length; i++) {
						GUIBUTTONS[i].setBackground(null);
						GUIBUTTONS[i].setText(OPTIONS[question][permutation[i]]);
					}
					state = 1;
				} else {
					GUI_question.setText("You got " + Math.round(1000 * correct / QUESTIONS.length) / 10 + "%");
					for (var GUI_button : GUIBUTTONS) {
						GUI_button.setVisible(false);
						GUI_button.setFocusable(false);
						GUI_button.setEnabled(false);
					}
					state = 3;
				}
				question++;
				break;
			case 3://results
				break;
		}
	};
	/**
	 * Creates new form WatermanFirstProgram
	 */
	public MultipleChoiceWaterman() {
		initComponents();
		GUIBUTTONS = new javax.swing.JButton[]{GUI_button_a, GUI_button_b, GUI_button_c, GUI_button_d};
		GUI_remaing.setText("" + QUESTIONS.length);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        GUI_title = new javax.swing.JLabel();
        GUI_question = new javax.swing.JLabel();
        GUI_button_a = new javax.swing.JButton();
        GUI_button_b = new javax.swing.JButton();
        GUI_button_c = new javax.swing.JButton();
        GUI_button_d = new javax.swing.JButton();
        GUI_correct_label = new javax.swing.JLabel();
        GUI_incorrect_label = new javax.swing.JLabel();
        GUI_remaing_label = new javax.swing.JLabel();
        GUI_correct = new javax.swing.JLabel();
        GUI_incorrect = new javax.swing.JLabel();
        GUI_remaing = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(475, 300));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        GUI_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GUI_title.setText("Multiple Choice Quiz");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_title, gridBagConstraints);

        GUI_question.setText("The Princess Bride");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_question, gridBagConstraints);

        GUI_button_a.setText("Click");
        GUI_button_a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GUI_button_a_action(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_button_a, gridBagConstraints);

        GUI_button_b.setText("to");
        GUI_button_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GUI_button_b_action(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_button_b, gridBagConstraints);

        GUI_button_c.setText("start");
        GUI_button_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GUI_button_c_action(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_button_c, gridBagConstraints);

        GUI_button_d.setText("Quiz");
        GUI_button_d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GUI_button_d_action(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_button_d, gridBagConstraints);

        GUI_correct_label.setText("correct");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_correct_label, gridBagConstraints);

        GUI_incorrect_label.setText("incorrect");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_incorrect_label, gridBagConstraints);

        GUI_remaing_label.setText("remaing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_remaing_label, gridBagConstraints);

        GUI_correct.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_correct, gridBagConstraints);

        GUI_incorrect.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_incorrect, gridBagConstraints);

        GUI_remaing.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        getContentPane().add(GUI_remaing, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void GUI_button_a_action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUI_button_a_action
		GUI_button_action(0);
    }//GEN-LAST:event_GUI_button_a_action
    private void GUI_button_b_action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUI_button_b_action
		GUI_button_action(1);
    }//GEN-LAST:event_GUI_button_b_action
    private void GUI_button_c_action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUI_button_c_action
		GUI_button_action(2);
    }//GEN-LAST:event_GUI_button_c_action
    private void GUI_button_d_action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUI_button_d_action
		GUI_button_action(3);
    }//GEN-LAST:event_GUI_button_d_action
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				System.out.println(info.toString());
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MultipleChoiceWaterman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}// </editor-fold>
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MultipleChoiceWaterman().setVisible(true);
			}
		});
	}
	//<editor-fold defaultstate="collapsed" desc=" variable declaration ">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GUI_button_a;
    private javax.swing.JButton GUI_button_b;
    private javax.swing.JButton GUI_button_c;
    private javax.swing.JButton GUI_button_d;
    private javax.swing.JLabel GUI_correct;
    private javax.swing.JLabel GUI_correct_label;
    private javax.swing.JLabel GUI_incorrect;
    private javax.swing.JLabel GUI_incorrect_label;
    private javax.swing.JLabel GUI_question;
    private javax.swing.JLabel GUI_remaing;
    private javax.swing.JLabel GUI_remaing_label;
    private javax.swing.JLabel GUI_title;
    // End of variables declaration//GEN-END:variables
	// </editor-fold>
}
